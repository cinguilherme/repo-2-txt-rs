name: Cross-Platform Release

on:
  push:
    branches: [main]

permissions:
  contents: write
jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
          - os: ubuntu-latest
            target: linux-x86_64
            archive: tar.gz
          - os: windows-latest
            target: i686-pc-windows-gnu
            archive: zip
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary for ${{ matrix.target }}
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.archive }}" = "tar.gz" ]; then
            tar -czvf repo-2-text-rs-${{ matrix.target }}.tar.gz repo-2-text-rs
          else
            zip repo-2-text-rs-${{ matrix.target }}.zip repo-2-text-rs.exe
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-2-text-rs-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/repo-2-text-rs-${{ matrix.target }}.${{ matrix.archive }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get commit message
        id: commit_msg
        run: echo "MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

      - name: Generate timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Create Release
        if: contains(steps.commit_msg.outputs.MESSAGE, 'release')
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: "release-${{ steps.timestamp.outputs.TIMESTAMP }}"
          release_name: "repo-2-text-rs Release"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Artifacts
        if: contains(steps.commit_msg.outputs.MESSAGE, 'release')
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload Assets
        if: contains(steps.commit_msg.outputs.MESSAGE, 'release')
        run: |
          upload_url="${{ steps.create_release.outputs.upload_url }}"
          upload_url="${upload_url%\{*}"
          for asset in $(find artifacts -type f); do
            name=$(basename "$asset")
            echo "Uploading $name"
            curl -s \
              -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$asset" \
              "$upload_url?name=$name"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}